// Immersion contract
// store song & metadata, including artists to remunerate; return songid
// retrieve song given songid
// retrieve set of songs, metadata, & corresponding songids
// get new userid with 50 plays
// play(songid, userid): if (remaining user plays > 0) { decrement user plays, increment song plays, return allowed } else { return denied }
// getPlaysRemaining(userid)


new metaDataMapStore, songMapStore, userMapStore, remunerate, testLog(`rho:io:stderr`) in {
  metaDataMapStore!({}) |
  songMapStore!({}) |
  userMapStore!({}) |
  contract @["Immersion", "store"](@songDataIn, @songMetadataIn, songIdOut) = {
    new songId, songDataId in {
      for (@metaDataMap <- metaDataMapStore; @songMap <- songMapStore) {
        metaDataMapStore!(metaDataMap.set(*songId.toByteArray(), [songMetadataIn, *songDataId.toByteArray()])) |
        songMapStore!(songMap.set(*songDataId.toByteArray(), songDataIn)) |
        songIdOut!(*songId.toByteArray()) | testLog ! (["THE ID IS : ", *songId.toByteArray()])
      }
    }
  } |
  contract @["Immersion", "retrieveSong"](@songIdIn, songDataOut) = {
    for (@metaDataMap <- metaDataMapStore; @songMap <- songMapStore) {
    testLog !("im in FETCH NOW ") |
      metaDataMapStore!(metaDataMap) |
      songMapStore!(songMap) |
      songDataOut!(songMap.get(metaDataMap.get(songIdIn).nth(1))) |
      testLog !("THIS IS THE fetched SONG " )
    }
  } |
  
  // metaDataMapOut: name on which to send map from song ids to metadata
  contract @["Immersion", "retrieveMetaData"](metaDataMapOut) = {
    for (@metaDataMap <- metaDataMapStore) {
      metaDataMapStore!(metaDataMap) |
      metaDataMapOut!(metaDataMap)
    }
  } |
  
  // userIdOut: name on which to send new user id (ByteArray)
  contract @["Immersion", "newUserId"](userIdOut) = {
    new userId in {
      for (@userMap <- userMapStore) {
        userMapStore!(userMap.set(*userId.toByteArray(), 50)) |
        userIdOut!(*userId.toByteArray())
      }
    }
  } |
  
  // songIdIn: bytearray
  // userIdIn: bytearray
  // permittedOut: boolean
  contract @["Immersion", "play"](@songIdIn, @userIdIn, permittedOut) = {
    for (@metaDataMap <- metaDataMapStore; @userMap <- userMapStore) {
      metaDataMapStore!(metaDataMap) |  // peek

      new playsRemainingOut in {
        playsRemainingOut!(userMap.get(userIdIn)) |
        for (@playsRemaining <- playsRemainingOut) {
          new mdOut in {
            mdOut!(metaDataMap.get(songIdIn)) |
            for (@md <- mdOut) {
              if (playsRemaining == Nil or playsRemaining == 0 or md == Nil) {
                userMapStore!(userMap) |
                permittedOut!(false)
              } else {
                userMapStore!(userMap.set(userIdIn, playsRemaining - 1)) |
                // ISSUE: we assume this succeeds; i.e. that metadata
                // supplied to "store" is correct.
                remunerate!(md.nth(0), Nil) |
                permittedOut!(true)
              }
            }
          }
        }
      }
    }
  } |
  
  // userIdIn: bytearray
  // countOut: name on which the reamining play count is sent
  contract @["Immersion", "playCount"](@userIdIn, countOut) = {
    for (@userMap <- userMapStore) {
      userMapStore!(userMap) |
      countOut!(userMap.get(userIdIn))
    }
  } |

  new mintStore, pubKeyToPurseStore, showBalances, debug(`rho:io:stderr`) in {
    @"MakeMint"!(*mintStore) |
    pubKeyToPurseStore!({}) |

    debug!("contract remunerate...") |
    contract remunerate(@metaData, done) = {
      debug!(["remunerate:", metaData.get("Title Name"), "by", metaData.get("Artist Name")]) |

      new payEach, payOne, newKeysOut in {
        for (@start <- pubKeyToPurseStore) {
          payEach!(metaData.get("songwriters"), start) |
          for (@newKeys <- newKeysOut) {
            showBalances!(metaData.get("songwriters"), Nil) |
            pubKeyToPurseStore!(newKeys) |
            done!(Nil)
          } |

          contract payEach(@writers, @current) = {
            // debug!(["payEach:", writers, current]) |
            match writers {
              [artist, ...rest] => {
                new newPurseMapOut in {
                  payOne!(artist, current, *newPurseMapOut) |
                  for (@newPurseMap <- newPurseMapOut) {
                    payEach!(rest, newPurseMap)
                  }
                }
              }
              [] => {
                newKeysOut!(current)
              }
            }
          } |
          contract payOne(@artist, @current, purseMapOut) = {
            // debug!(["payOne:", artist]) |
            new maybeMyPurseOut, myPurseOut, paymentPurseOut, newPurseMapOut in {
              for (@mint <- mintStore) {
                mintStore!(mint) | // peek
                @[mint, "makePurse"]!(artist.get("share"), *paymentPurseOut) |

                maybeMyPurseOut!(current.get(artist.get("pubKey"))) |
                for (@maybeMyPurse <- maybeMyPurseOut) {
                  if (maybeMyPurse == Nil) {
                    @[mint, "makePurse"]!(0, *myPurseOut) |
                    for (@peek <- myPurseOut) {
                      debug!(["new purse for:", artist.get("name")]) |
                      myPurseOut!(peek) |
                      newPurseMapOut!(current.set(artist.get("pubKey"), peek)) |

                      // publish their wallet at their public key
                      @"BasicWallet"!(peek, "ed25519", artist.get("pubKey"), artist.get("pubKey"))
                    }
                  } else {
                    // debug!(["already have purse for:", artist.get("name")]) |
                    myPurseOut!(maybeMyPurse) |
                    newPurseMapOut!(current)
                  }
                } |
                for (@myPurse <- myPurseOut; @paymentPurse <- paymentPurseOut; @purseMap <- newPurseMapOut) {
                  debug!(["paying", artist.get("share"), " to ", artist.get("name")]) |
                  new paidAck in {
                    @[myPurse, "deposit"]!(artist.get("share"), paymentPurse, *paidAck) |
                    for (_ <- paidAck) {
                      purseMapOut!(purseMap)
                    }
                  }
                }
              }
            }
          }
        }
      }
    } |
    contract showBalances(@writers, done) = {
      // debug!(["showBalances: ", writers]) |
      for (@pubKeyToPurse <- pubKeyToPurseStore) {
        // debug!(["showBalances keyToPurse: ", pubKeyToPurse]) |
        pubKeyToPurseStore!(pubKeyToPurse) |
        new showAll in {
          showAll!(writers) |

          contract showAll(@writers) = {
            match writers {
              [artist, ...rest] => {
                new balanceOut in {
                  @[pubKeyToPurse.get(artist.get("pubKey")), "getBalance"]!(*balanceOut) |
                  for (@balance <- balanceOut) {
                    debug!([artist.get("name"), " has ", balance])
                  }
                } |
                showAll!(rest)
              }
              [] => done!(Nil)
            }
          }
        }
      }
    }
  }
}
